#include"numbox.nvgt"
class number_sort
{
int[] numbers;
int[] sorted_numbers;
int num_index=0;
int number_taken=0;
int taken_index=0;
int number_amount;
int number_min, number_max;
int gamemode=1;
timer gametimer;
int gametime=30000;
sound_pool p;
sound music;
menu m;
pack pk;
void main()
{
pk.open("sounds/ns.dat",PACK_OPEN_MODE_READ);
@sound_default_pack=pk;
music.load("music.ogg");
music.volume=-18;
main_menu();
}
void game()
{
music.play_looped();
speak("Go!");
gametimer.restart();
while(true)
{
wait(5);
if (key_pressed(KEY_LEFT) and num_index>0)
{
p.play_stationary("numbermove.ogg",false);
num_index--;
speak(numbers[num_index]+"");
}
if (key_pressed(KEY_RIGHT) and num_index<numbers.length()-1)
{
p.play_stationary("numbermove.ogg",false);
num_index++;
speak(numbers[num_index]+"");
}
if (key_pressed(KEY_T))
{
speak(ms_to_readable_time(gametime-gametimer.elapsed));
}
if (key_pressed(KEY_ESCAPE))
{
music.stop();
reset();
main_menu();
}
if (key_pressed(KEY_SPACE))
{
if (number_taken==0 and taken_index==0)
{
number_taken=numbers[num_index];
taken_index=num_index;
speak(number_taken+" picked up.");
}
else
{
if (num_index==taken_index)
{
p.play_stationary("movecancel.ogg",false);
speak(number_taken+" put down.");
number_taken=0;
taken_index=0;
}
else
{
int number_to_swop=numbers[num_index];
numbers[num_index]=number_taken;
numbers[taken_index]=number_to_swop;
p.play_stationary("movecomplete.ogg",false);
speak("Swopped.");
number_taken=0;
taken_index=0;
}
}
}
if (gametimer.elapsed>=gametime)
{
music.stop();
p.play_stationary("fail.ogg",false);
dlg("Sorry, but you failed to sort the numbers. Try again later.");
reset();
main_menu();
}
bool sorted=true;
for(uint i=0; i<numbers.length(); i++)
{
if (numbers[i]!=sorted_numbers[i])
{
sorted=false;
break;
}
}
if (sorted)
{
music.stop();
p.play_stationary("sorted.ogg",false);
dlg("Congratulations, you have sorted the numbers. Your time was "+ms_to_readable_time(gametimer.elapsed)+".");
reset();
main_menu();
}
}
}

void fill_numbers()
{
numbers.resize(number_amount);
sorted_numbers.resize(number_amount);
for(int i=0; i<numbers.length(); i++)
{
numbers[i]=random(number_min,number_max);
}
numbers=shuffle(numbers);
sorted_numbers=numbers;
if (gamemode==1)
sorted_numbers.sort_ascending();
else
sorted_numbers.sort_descending();
}
void ask_for_numbers()
{
number_amount=parse_int(numbox("Please type the amount of numbers in your number list"));
if (number_amount==0)
{
dlg("Nothing was entered. Canceled.");
main_menu();
}
number_min=parse_int(numbox("Type the minimum number that will be in your list."));
if (number_min==0)
{
dlg("Nothing was entered. Canceled.");
main_menu();
}
number_max=parse_int(numbox("Type the maximum number that will be in your list."));
if (number_max==0)
{
dlg("Nothing was entered. Canceled.");
main_menu();
}
gametime=parse_int(numbox("How many seconds should you have to sort the numbers?"));
if (gametime==0)
{
dlg("Nothing was entered. Canceled.");
main_menu();
}
else
{
gametime=gametime*1000;
}
}
array<int>@ shuffle(array<int>@ elements)
{
for(uint i=elements.length()-1; i>0; i--)
{
int j=random(0,i);
int temp=elements[i];
elements[i]=elements[j];
elements[j]=temp;
}
return elements;
}
void setmenu(bool mainmenu=false)
{
m.reset(false);
m.click_sound="menumove.ogg";
m.enter_sound="menuenter.ogg";
if (mainmenu)
m.add_music("menu.ogg",-15);
}
void main_menu()
{
setmenu(true);
m.add_item("Start game","play");
m.add_item("Help","help");
m.add_item("Exit","exit");
string res=m.run("Number sort main menu. Use arrows to move through items and press enter to select.");
if (res=="play")
{
modemenu();
m.fade_music(25);
fill_numbers();
game();
}
else if (res=="help")
{
dlglist(array<string>={"Welcome to Number Sort.","In this game, you must sort a list of numbers within whatever timeframe you set.","The game is completely customizable, so that means you can change any aspect of the game to be what you want.","When you select start game, you are given a menu where you can select if you'd like to sort numbers from least to greatest or greatest to least. Select based on your preference.","After you've selected that, you are given several input boxes that will help you customize your gameplay.","When you have entered all the required info, the game will start.","Press the left and right arrows to move through your numbers. Press space to pick up or put down a number.","Press t to see how much time you have left.","Finally, press escape to cancel the game.","Enjoy!"});
main_menu();
}
else
{
m.fade_music(25);
mainmenu();
}
}
void reset()
{
numbers.resize(0);
sorted_numbers.resize(0);
num_index=0;
taken_index=0;
number_taken=0;
gamemode=1;
gametimer.pause();
}
void modemenu()
{
setmenu(false);
m.add_item("Sort from least to greatest","gm1");
m.add_item("Sort from greatest to least","gm2");
string res=m.run("Select your game mode");
if (res=="gm1")
{
gamemode=1;
ask_for_numbers();
}
else if (res=="gm2")
{
gamemode=2;
ask_for_numbers();
}
else
{
main_menu();
}
}
}