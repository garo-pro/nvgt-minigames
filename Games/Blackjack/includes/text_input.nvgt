//This is a simple text box that uses NGT's internal features
//This class also supports the ability to mask the characters written, copy and paste, as well as set a limit of how many characters can be typed. There are also options for adjusting the echoing of characters, and how capital characters are announced.
#include "key_hold.nvgt"
#include"form.nvgt"
class text_input
{
sound capital;
private string entry;
private string title;
private int cursor=0;
bool passworded=false;
bool pasteable=true,copyable=true;
int textlength=0;
int repeat=1;
int caps=1;
string mask="";
key_hold back(KEY_BACK,500,40);
key_hold back2(KEY_DELETE,500,40);
key_hold larrow(KEY_LEFT,500,40);
key_hold rarrow(KEY_RIGHT,500,40);
private string[] nochars;
private string[] onlychars;
private string nochardes="";
//Constructor.
private bool m_canceled=false;
text_input()
{
reset();
}
void reset()
{
this.cursor=0;
this.entry="";
this.title="";
this.passworded=false;
this.mask="";
this.textlength=0;
this.pasteable=true;this.copyable=true;
this.nochars.resize(0);
this.onlychars.resize(0);
this.nochardes="";
this.m_canceled=false;
}
bool get_canceled() property
{
return this.m_canceled;
}
bool is_only_allowed_char(string char)
{
//true on If the character is found, false If it is not allowed.
for(uint i=0;i<char.length();i++)
{
if(this.onlychars.find(""+char[i])<0) return false;
}
return true;
}
bool is_allowed_char(string char)
{
//true on If the character is found, false If it is not allowed.
for(uint i=0;i<char.length();i++)
{
if(this.nochars.find(""+char[i])<0) return true;
}
return false;
}
bool set_only_allowed_chars(string ch, string des)
{
if(ch.is_empty()) return false;
if(ch=="none")
{
this.nochars.resize(0);
this.onlychars.resize(0);
this.nochardes="";
return true;
}
this.nochars.resize(0);
this.onlychars.resize(0);
for(uint i=0;i<ch.length();i++) this.onlychars.insert_last(""+ch[i]);
this.nochardes=des;
return true;
}
bool set_not_allowed_chars(string ch, string des)
{
if(ch.is_empty()) return false;
if(ch=="none")
{
this.nochars.resize(0);
this.onlychars.resize(0);
this.nochardes="";
return true;
}
this.nochars.resize(0);
this.onlychars.resize(0);
for(uint i=0;i<ch.length();i++) this.nochars.insert_last(""+ch[i]);
this.nochardes=des;
return true;
}
//This function simply returns the appropriate word form for any symbols that may arise, in case screen readers are set to not read punctuation.
string symbol_to_word(string char)
{
char=char.replace("~","tilda");
char=char.replace("!","exclaim");
char=char.replace(",","comma");
char=char.replace(".","period");
char=char.replace("/","slash");
char=char.replace("@","at");
char=char.replace("#","number");
char=char.replace("$","dollar");
char=char.replace("%","percent");
char=char.replace("^","caret");
char=char.replace("&","ampersand");
char=char.replace("*","star");
char=char.replace("(","left paren");
char=char.replace("%","percent");
char=char.replace(")","right paren");
char=char.replace("-","dash");
char=char.replace("_","underscore");
char=char.replace("=","equals");
char=char.replace("+","plus");
char=char.replace("`","grave accent");
char=char.replace("	","tab");
char=char.replace("[","left bracket");
char=char.replace("]","right bracket");
char=char.replace("{","left brace");
char=char.replace("}","right brace");
char=char.replace("\\","backslash");
char=char.replace("|","bar");
char=char.replace(";","semicolon");
char=char.replace("\"","quote");
char=char.replace(":","colon");
char=char.replace("'","apostrophe");
char=char.replace("<","less than");
char=char.replace(">","greater than");
char=char.replace("?","question mark");
return char;
}
void speak_character_at(int position)
{
if(position>entry.length()-1 or position<0)
{ 
speak("Blank");
return;
}
else{
string char=entry[position];
if(passworded) speak(""+mask,true);
else{
if(char.is_upper())
{
if(caps==1) speak("Cap "+char,true);
else if(caps==2){
capital.stop(); capital.play();
speak(char,true);
}
else if(caps==3)
{
speak(char,true);
}
}
else if(char==" ")
{
speak("Space");
}
//else speak(symbol_to_word(char),true);
else speak(char,true);
}
}
}
bool input_character(string char)
{
if(entry.length()==textlength and textlength>0)
{
cursor=entry.length()-1;
return false;
}
if(this.onlychars.length()>0 && !this.is_only_allowed_char(char))
{
if(this.nochardes!="") speak(this.nochardes);
return false;
}
if(this.nochars.length()>0 && !this.is_allowed_char(char))
{
if(this.nochardes!="") speak(this.nochardes);
return false;
}
else{
if(repeat==1){
if(passworded) speak(mask,true);
else{
if(char.is_upper())
{
if(caps==1) speak("Cap "+char,true);
else if(caps==2){
capital.stop(); capital.play();
speak(char,true);
}
else if(caps==3)
{
speak(char,true);
}
}
else if(char==" ")
{
speak("Space");
}
else speak(symbol_to_word(char),true);
}
}
string newchar=entry.substr(0,cursor)+char+entry.substr(cursor);
entry=newchar;
}
return true;
}
string input(string ttl,string default_text="",bool uses_password=false,string mask_char="",int txtlength=0)
{
if(!capital.active) capital.load("cap.ogg");
title=ttl;
passworded=uses_password;
mask=mask_char;
textlength=txtlength;
speak(ttl,true);
if(default_text!="")
{
entry=default_text.substr(0,textlength-1);
cursor=entry.length();
}
while(true)
{
wait(0.5);
string c=get_characters();
if(c!="")
{
if(input_character(c)) cursor+=c.length();
}
if(key_pressed(KEY_TAB))speak(title,true);
if(controldown())
{
if(key_pressed(KEY_V))
{
if(!this.pasteable)
{
speak("this input does not allow pasting.");
continue;
}
string pastetext=clipboard_get_text();
if(pastetext.length()==0) continue;
int space=entry.length()+pastetext.length();
if(space>textlength and textlength>0) continue;
if(this.onlychars.length()>0 && !this.is_only_allowed_char(pastetext))
{
if(this.nochardes!="") speak(this.nochardes);
continue;
}
if(this.nochars.length()>0 && !this.is_allowed_char(pastetext))
{
if(this.nochardes!="") speak(this.nochardes);
continue;
}
string newpastetext=entry.substr(0,cursor)+pastetext+entry.substr(cursor);
entry=newpastetext;
cursor+=pastetext.length();
speak("Pasted from clipboard.");
}
if(key_pressed(KEY_C))
{
if(!this.copyable)
{
speak("this input does not allow copying.");
continue;
}
string fulltext=entry;
if(fulltext.length()==0) continue;
clipboard_set_text(fulltext);
speak("Copied to clipboard.");
}
}
if(key_pressed(KEY_RETURN))
{
string fulltext=entry;
return fulltext;
}
if(key_pressed(KEY_HOME))
{
cursor=0;
speak_character_at(cursor);
}
if(key_pressed(KEY_END))
{
cursor=entry.length()-1;
speak_character_at(cursor);
}
if(key_pressed(KEY_F1))
{
if(caps==1)
{
caps=2;
speak("Beep for uppercase letters.");
continue;
}
if(caps==2)
{
caps=3;
speak("Ignore uppercase letters.");
continue;
}
if(caps==3)
{
caps=1;
speak("Speak uppercase letters.");
continue;
}
}
if(key_pressed(KEY_F2))
{
repeat=repeat==1?0:1;
speak("Character repeat "+(repeat==1?"enabled":"disabled"),true);
}
if(key_pressed(KEY_UP) or key_pressed(KEY_DOWN))
{
string fulltext;
for(uint i=0; i<entry.length(); i++) fulltext+=""+entry[i];
if(fulltext.length()==0) continue;
speak(fulltext,true);
}
if(rarrow.pressing)
{
if(controldown()) nextword();
else{
cursor=utf8next(entry,cursor);
if(cursor>entry.length()) cursor=entry.length();
speak_character_at(cursor);
}
}

if(larrow.pressing)
{
if(controldown()) prevword();
else{ 
cursor=utf8prev(entry,cursor);
if(cursor<0) cursor=0;
speak_character_at(cursor);
}
}
if((back.pressing or back2.pressing) and cursor>0)
{
if(controldown() and entry.length()>0)
{
speak("Cleared text.");
entry="";
cursor=0;
}
else{
speak_character_at(cursor-1);
entry=entry.substr(0,cursor-1)+entry.substr(cursor);
cursor--;
}
}
if(key_pressed(KEY_ESCAPE))
{
this.m_canceled=true;
break;
}
}
return "";
}
void nextword()
{
int counter;
if(entry.length()==0)
{
return;
}
if((cursor<0)||(cursor>=entry.length()))
{
return;
}
for(counter=cursor; counter<entry.length(); counter++)
{
if((entry[counter]!=" ")&&(entry[counter]!="\r"))
{
continue;
}
if(entry[counter]==" ")
{
cursor=counter+1;
speak(speak_word(cursor),true);
break;
}
if(entry[counter]=="\r")
{
cursor=counter+2;
speak(speak_word(cursor),true);
break;
}
}
if(counter==entry.length()-1)
{
cursor=entry.length();
speak("Blank");
}
}
void prevword()
{
bool found_end=false;
int counter;
int start;
int end;
if(entry.length()==0)
{
return;
}
if(cursor<=0)
{
cursor=0;
speak(speak_word(cursor),true);
return;
}
for(counter=cursor; counter>=0; counter--)
{
if(counter==entry.length())
{
continue;
}
if(counter>entry.length())
{
break;
}
if((entry[counter]!=" ")&&(entry[counter]!="\n"))
{
continue;
}
if(entry[counter]==" ")
{
if(found_end==false)
{
end=counter-1;
found_end=true;
}
else
{
cursor=counter+1;
speak(speak_word(cursor),true);
break;
}
}
if(entry[counter]=="\n")
{
if(found_end==false)
{
end=counter-2;
found_end=true;
}
else
{
cursor=counter+2;
speak(speak_word(cursor),true);
break;
}
}
}
if((counter<=0)||(counter>=entry.length()))
{
cursor=0;
speak(speak_word(cursor),true);
}
}
string speak_word(int p)
{
string wordd;
for(uint i=p; i<entry.length(); i++)
{
if(entry[i]!=" ") wordd+=""+entry[i];
else break;
}
return wordd;
}
}
bool controldown()
{
if(key_down(KEY_LCTRL) or key_down(KEY_RCTRL)) return true;
return false;
}